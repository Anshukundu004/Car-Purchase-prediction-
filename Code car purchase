{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Anshukundu004/Anshukundu004/blob/main/Logistic_Regression.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0MRC0e0KhQ0S"
      },
      "source": [
        "# Logistic Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LWd1UlMnhT2s"
      },
      "source": [
        "## Importing the libraries"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ],
      "metadata": {
        "id": "LBrs8MGkYCf1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K1VMqkGvhc3-"
      },
      "source": [
        "## Importing the dataset"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset=pd.read_csv('car_purchase_data.csv')\n",
        "x=dataset.iloc[:,:-1].values\n",
        "y=dataset.iloc[:,-1].values"
      ],
      "metadata": {
        "id": "hBKDZbE4YRCw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YvxIPVyMhmKp"
      },
      "source": [
        "## Splitting the dataset into the Training set and Test set"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=40)"
      ],
      "metadata": {
        "id": "CtubZz1RZBqb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kW3c7UYih0hT"
      },
      "source": [
        "## Feature Scaling"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "sc=StandardScaler()\n",
        "\n",
        "x_train=sc.fit_transform(x_train)\n",
        "\n",
        "x_test=sc.fit_transform(x_test)"
      ],
      "metadata": {
        "id": "AeDnZlSdZwDI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WRdKVJOJbWbV",
        "outputId": "a3e8ec43-8b57-4391-e02e-4b5f04fdeec9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-0.70562757  1.36559977]\n",
            " [-0.70562757 -0.07833337]\n",
            " [ 0.26472405  0.00830262]\n",
            " [ 1.91432181 -1.3778732 ]\n",
            " [-0.22045176  2.116445  ]\n",
            " [ 0.94397019  1.94317303]\n",
            " [-0.1234166   0.18157459]\n",
            " [ 0.16768889  0.21045326]\n",
            " [-1.87004951 -1.49338785]\n",
            " [ 0.94397019 -1.17572256]\n",
            " [ 0.94397019  2.02980902]\n",
            " [ 0.36175921  1.07681314]\n",
            " [-0.31748692 -0.39599866]\n",
            " [ 0.94397019  1.39447843]\n",
            " [ 0.6528647  -1.40675186]\n",
            " [ 0.84693502 -1.17572256]\n",
            " [-0.51155725 -0.80029994]\n",
            " [-0.89969789  0.12381727]\n",
            " [-1.19080338  0.38372523]\n",
            " [ 1.13804051 -1.00245058]\n",
            " [-0.99673306 -1.11796524]\n",
            " [ 1.23507567 -1.3778732 ]\n",
            " [ 0.74989986  1.33672111]\n",
            " [ 1.52618116  1.07681314]\n",
            " [-0.1234166  -0.02057605]\n",
            " [-0.41452208  0.03718128]\n",
            " [ 1.33211083 -0.94469326]\n",
            " [ 1.91432181  0.8746625 ]\n",
            " [-0.70562757 -0.1360907 ]\n",
            " [ 0.16768889 -0.16496936]\n",
            " [-1.09376822  0.49923988]\n",
            " [ 0.07065373  0.06605994]\n",
            " [-1.87004951 -1.32011588]\n",
            " [-0.51155725 -0.85805727]\n",
            " [-0.41452208 -0.80029994]\n",
            " [ 0.94397019 -1.08908657]\n",
            " [-0.31748692 -1.3778732 ]\n",
            " [ 0.36175921  0.26821058]\n",
            " [-0.1234166   0.23933192]\n",
            " [-0.80266273 -0.62702797]\n",
            " [ 0.94397019 -1.03132925]\n",
            " [ 0.84693502 -0.62702797]\n",
            " [-0.31748692 -0.33824134]\n",
            " [-0.31748692 -0.94469326]\n",
            " [ 0.55582954  1.97205169]\n",
            " [-1.19080338  0.29708924]\n",
            " [-1.57894403  0.29708924]\n",
            " [ 2.10839213  1.07681314]\n",
            " [ 0.07065373  0.23933192]\n",
            " [ 0.6528647   1.74102239]\n",
            " [-0.70562757  0.52811855]\n",
            " [ 1.72025148  1.79877971]\n",
            " [ 0.07065373  1.82765838]\n",
            " [ 1.91432181  2.116445  ]\n",
            " [ 2.01135697 -0.82917861]\n",
            " [ 0.36175921  0.06605994]\n",
            " [-1.19080338  0.26821058]\n",
            " [ 1.81728665  0.0949386 ]\n",
            " [-0.89969789 -0.80029994]\n",
            " [ 0.94397019  0.0949386 ]\n",
            " [-1.09376822 -1.1468439 ]\n",
            " [ 0.26472405  0.03718128]\n",
            " [ 0.94397019  1.82765838]\n",
            " [-1.19080338 -0.54039198]\n",
            " [ 1.33211083  1.94317303]\n",
            " [ 0.16768889  0.12381727]\n",
            " [-0.1234166   0.0949386 ]\n",
            " [ 0.26472405 -0.74254262]\n",
            " [-0.22045176 -0.22272669]\n",
            " [-0.31748692  0.58587587]\n",
            " [ 0.74989986  0.0949386 ]\n",
            " [-0.89969789  0.35484657]\n",
            " [ 0.6528647  -1.11796524]\n",
            " [-0.60859241  1.33672111]\n",
            " [-0.51155725  2.26083832]\n",
            " [ 0.26472405  0.23933192]\n",
            " [ 0.36175921  0.23933192]\n",
            " [-1.09376822 -1.55114518]\n",
            " [-1.09376822 -0.48263465]\n",
            " [-0.60859241  1.33672111]\n",
            " [ 0.84693502 -1.32011588]\n",
            " [ 1.33211083  0.55699721]\n",
            " [ 1.72025148  0.96129849]\n",
            " [-0.02638143 -0.5981493 ]\n",
            " [ 1.52618116  0.96129849]\n",
            " [-0.31748692 -0.9158146 ]\n",
            " [-0.41452208 -0.80029994]\n",
            " [-1.3848737  -0.45375599]\n",
            " [-0.70562757 -1.52226652]\n",
            " [-0.22045176 -0.48263465]\n",
            " [-0.1234166  -0.51151332]\n",
            " [-1.28783854  0.23933192]\n",
            " [ 1.72025148 -0.30936268]\n",
            " [ 0.16768889  2.05868768]\n",
            " [ 0.16768889 -0.39599866]\n",
            " [-0.41452208 -1.32011588]\n",
            " [-1.96708468  0.32596791]\n",
            " [-0.1234166   0.6436332 ]\n",
            " [-1.19080338 -1.6089025 ]\n",
            " [ 0.84693502 -1.06020791]\n",
            " [-1.67597919  0.49923988]\n",
            " [-0.1234166   2.17420233]\n",
            " [ 0.6528647  -1.29123721]\n",
            " [-0.22045176  0.12381727]\n",
            " [-0.22045176 -0.30936268]\n",
            " [ 1.429146    0.32596791]\n",
            " [-0.99673306  0.38372523]\n",
            " [ 2.10839213 -0.82917861]\n",
            " [-1.77301435  0.32596791]\n",
            " [ 0.16768889 -0.28048401]\n",
            " [-1.19080338  0.26821058]\n",
            " [-1.3848737  -1.11796524]\n",
            " [-0.31748692 -1.26235855]\n",
            " [-0.1234166   0.26821058]\n",
            " [-1.3848737   0.38372523]\n",
            " [ 1.52618116 -1.29123721]\n",
            " [ 1.62321632  1.56775041]\n",
            " [-1.09376822 -0.36712   ]\n",
            " [-0.99673306 -0.77142128]\n",
            " [-0.1234166   0.21045326]\n",
            " [ 0.07065373 -0.28048401]\n",
            " [ 0.74989986 -1.3778732 ]\n",
            " [ 1.429146    0.96129849]\n",
            " [-0.51155725 -0.56927064]\n",
            " [ 0.16768889 -0.30936268]\n",
            " [-0.1234166   0.00830262]\n",
            " [-1.28783854  0.26821058]\n",
            " [ 0.16768889  0.12381727]\n",
            " [-0.1234166  -0.45375599]\n",
            " [-0.99673306  0.4126039 ]\n",
            " [ 0.36175921 -0.48263465]\n",
            " [ 1.81728665 -0.30936268]\n",
            " [ 0.16768889 -0.68478529]\n",
            " [-1.19080338 -1.11796524]\n",
            " [-1.19080338 -1.6089025 ]\n",
            " [ 0.74989986  0.49923988]\n",
            " [-1.87004951 -1.29123721]\n",
            " [ 0.6528647   0.23933192]\n",
            " [ 0.26472405 -0.30936268]\n",
            " [ 0.07065373  1.01905582]\n",
            " [ 0.84693502 -0.5981493 ]\n",
            " [-0.31748692 -0.36712   ]\n",
            " [-1.19080338  0.03718128]\n",
            " [-0.89969789  0.26821058]\n",
            " [ 0.74989986 -1.40675186]\n",
            " [ 2.10839213 -0.71366396]\n",
            " [ 0.6528647  -0.74254262]\n",
            " [-0.70562757 -1.6089025 ]\n",
            " [-1.77301435  0.0949386 ]\n",
            " [ 1.04100535  0.44148256]\n",
            " [ 0.74989986 -0.33824134]\n",
            " [ 0.07065373 -0.82917861]\n",
            " [-1.77301435 -0.62702797]\n",
            " [-0.31748692  0.23933192]\n",
            " [-0.89969789 -0.28048401]\n",
            " [-0.99673306  1.50999308]\n",
            " [-0.80266273  0.52811855]\n",
            " [ 0.94397019  0.55699721]\n",
            " [ 2.01135697  0.49923988]\n",
            " [-1.19080338 -1.55114518]\n",
            " [-0.41452208  1.19232779]\n",
            " [ 1.04100535  2.02980902]\n",
            " [-1.19080338 -0.80029994]\n",
            " [-0.31748692 -1.32011588]\n",
            " [ 0.94397019  1.74102239]\n",
            " [-0.51155725 -0.04945471]\n",
            " [-0.31748692 -0.45375599]\n",
            " [-0.02638143 -0.5981493 ]\n",
            " [-1.3848737  -1.26235855]\n",
            " [ 2.01135697  0.35484657]\n",
            " [-0.1234166   1.91429436]\n",
            " [-0.22045176  1.36559977]\n",
            " [-0.02638143  1.19232779]\n",
            " [-0.31748692 -0.5981493 ]\n",
            " [-0.60859241 -1.52226652]\n",
            " [-0.89969789 -1.23347989]\n",
            " [-0.02638143 -0.16496936]\n",
            " [-1.19080338 -1.58002384]\n",
            " [ 0.36175921 -0.16496936]\n",
            " [-0.02638143  0.26821058]\n",
            " [ 1.91432181 -0.68478529]\n",
            " [-0.02638143 -0.28048401]\n",
            " [ 0.07065373  0.12381727]\n",
            " [-0.1234166   0.03718128]\n",
            " [-0.99673306 -0.33824134]\n",
            " [ 1.04100535 -1.23347989]\n",
            " [-0.22045176  1.56775041]\n",
            " [-1.48190887  0.32596791]\n",
            " [-0.31748692 -0.68478529]\n",
            " [-0.80266273 -1.55114518]\n",
            " [ 1.81728665 -1.08908657]\n",
            " [-1.3848737  -1.3778732 ]\n",
            " [-0.31748692  0.03718128]\n",
            " [-1.3848737   0.52811855]\n",
            " [ 0.84693502 -1.46450919]\n",
            " [ 1.13804051  0.49923988]\n",
            " [-0.31748692 -0.51151332]\n",
            " [-0.31748692 -0.28048401]\n",
            " [-0.70562757 -0.36712   ]\n",
            " [ 0.45879438  1.68326506]\n",
            " [ 0.07065373  0.73026919]\n",
            " [-0.99673306 -0.45375599]\n",
            " [-1.67597919  0.03718128]\n",
            " [-0.31748692  0.18157459]\n",
            " [-0.1234166  -0.54039198]\n",
            " [ 0.36175921  0.96129849]\n",
            " [ 2.01135697  0.15269593]\n",
            " [-1.57894403 -0.22272669]\n",
            " [ 0.07065373 -0.82917861]\n",
            " [ 0.16768889  0.00830262]\n",
            " [-0.99673306 -0.33824134]\n",
            " [-1.09376822  0.52811855]\n",
            " [-0.70562757 -1.06020791]\n",
            " [ 1.81728665  1.48111442]\n",
            " [-0.31748692  0.12381727]\n",
            " [ 0.84693502  0.99017715]\n",
            " [-0.80266273  0.23933192]\n",
            " [-1.28783854  0.47036122]\n",
            " [ 1.13804051 -1.46450919]\n",
            " [-1.48190887 -1.46450919]\n",
            " [-1.96708468 -0.54039198]\n",
            " [ 0.26472405 -0.56927064]\n",
            " [-0.41452208  1.27896378]\n",
            " [-0.99673306  0.47036122]\n",
            " [-0.31748692  2.20308099]\n",
            " [ 0.36175921  0.55699721]\n",
            " [-0.02638143  0.00830262]\n",
            " [ 0.74989986 -0.85805727]\n",
            " [ 0.84693502  1.22120646]\n",
            " [-1.67597919 -1.58002384]\n",
            " [ 1.429146    0.03718128]\n",
            " [-0.89969789  0.35484657]\n",
            " [ 1.04100535  0.49923988]\n",
            " [-0.31748692  0.75914785]\n",
            " [ 1.33211083 -1.43563053]\n",
            " [ 0.16768889 -0.39599866]\n",
            " [ 0.26472405 -0.33824134]\n",
            " [ 0.55582954 -0.9158146 ]\n",
            " [ 1.04100535  0.0949386 ]\n",
            " [ 0.74989986  0.73026919]\n",
            " [ 2.10839213 -0.82917861]\n",
            " [ 1.04100535 -0.9158146 ]\n",
            " [-0.80266273 -0.25160535]\n",
            " [ 0.84693502 -0.80029994]\n",
            " [ 0.84693502 -0.68478529]\n",
            " [-0.51155725 -0.30936268]\n",
            " [ 1.62321632  1.71214372]\n",
            " [ 1.23507567  2.17420233]\n",
            " [ 0.36175921 -0.51151332]\n",
            " [-1.09376822  0.55699721]\n",
            " [-0.02638143 -0.45375599]\n",
            " [-1.77301435 -1.3778732 ]\n",
            " [-0.31748692 -1.46450919]\n",
            " [ 2.01135697  1.71214372]\n",
            " [-0.60859241  1.4233571 ]\n",
            " [ 0.16768889 -0.39599866]\n",
            " [-0.51155725 -1.23347989]\n",
            " [-0.31748692  0.49923988]\n",
            " [ 0.07065373  1.48111442]\n",
            " [-0.99673306  0.23933192]\n",
            " [ 1.04100535 -1.00245058]\n",
            " [-0.31748692  0.06605994]\n",
            " [-0.1234166   0.26821058]\n",
            " [ 1.33211083  2.28971698]\n",
            " [-0.22045176 -0.5981493 ]\n",
            " [ 0.07065373  0.00830262]\n",
            " [-0.22045176 -0.54039198]\n",
            " [ 1.429146    2.08756634]\n",
            " [ 1.04100535 -0.16496936]\n",
            " [ 0.74989986  0.23933192]\n",
            " [-0.31748692 -0.77142128]\n",
            " [-0.99673306 -0.97357192]\n",
            " [ 0.45879438  1.19232779]\n",
            " [ 0.26472405  0.26821058]\n",
            " [ 0.07065373 -0.33824134]\n",
            " [-0.80266273  0.26821058]\n",
            " [-1.19080338  0.44148256]\n",
            " [ 2.01135697 -1.20460122]\n",
            " [-1.09376822  1.91429436]\n",
            " [-0.22045176  1.59662907]\n",
            " [ 0.84693502 -0.56927064]\n",
            " [ 1.91432181 -0.94469326]\n",
            " [-1.09376822 -1.46450919]\n",
            " [-0.70562757  0.0949386 ]\n",
            " [ 0.26472405  0.47036122]\n",
            " [ 0.94397019  0.73026919]\n",
            " [-0.02638143 -0.33824134]\n",
            " [ 0.07065373  0.00830262]\n",
            " [-0.31748692 -1.40675186]\n",
            " [ 2.10839213 -1.06020791]\n",
            " [-0.22045176 -1.08908657]\n",
            " [-0.51155725 -1.1468439 ]\n",
            " [ 0.94397019 -0.85805727]\n",
            " [ 0.07065373  1.82765838]\n",
            " [-1.77301435  0.32596791]\n",
            " [-1.87004951 -1.43563053]\n",
            " [ 0.07065373  0.18157459]\n",
            " [ 0.45879438  1.79877971]\n",
            " [ 1.33211083  1.25008512]\n",
            " [-1.19080338 -1.17572256]\n",
            " [-1.28783854 -1.08908657]\n",
            " [ 0.84693502  1.04793448]\n",
            " [-0.70562757  0.00830262]\n",
            " [ 0.36175921 -0.48263465]\n",
            " [-0.31748692 -0.30936268]\n",
            " [-0.51155725  1.22120646]\n",
            " [-0.80266273  1.30784244]\n",
            " [-1.3848737  -0.45375599]\n",
            " [-0.02638143 -0.56927064]\n",
            " [-0.60859241  1.85653704]\n",
            " [ 0.94397019 -1.20460122]\n",
            " [ 0.36175921  0.26821058]\n",
            " [ 0.36175921  0.12381727]\n",
            " [ 0.84693502  2.116445  ]\n",
            " [-1.87004951 -0.02057605]\n",
            " [ 1.23507567  1.82765838]\n",
            " [-1.96708468  0.44148256]\n",
            " [-0.60859241  2.28971698]\n",
            " [ 2.01135697  2.08756634]\n",
            " [ 0.26472405  0.03718128]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bb6jCOCQiAmP"
      },
      "source": [
        "## Training the Logistic Regression model on the Training set"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "cl=LogisticRegression(random_state=40)\n",
        "cl.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "yCxJPljPbaKG",
        "outputId": "03fd9c77-228a-42f0-bf87-877a9f7d1549"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(random_state=40)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=40)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(random_state=40)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yyxW5b395mR2"
      },
      "source": [
        "## Predicting a new result"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age=input(\"Enter the age of person\")\n",
        "salary=input(\"Enter the salary of person\")\n",
        "Age=float(age)\n",
        "Salary=float(salary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X66x0vn4coAK",
        "outputId": "5d29c17b-399b-4604-c738-ac8ee10a141c"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter the age of person20\n",
            "Enter the salary of person100000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vKYVQH-l5NpE"
      },
      "source": [
        "## Predicting the Test set results"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred=cl.predict(x_test)\n",
        "\n",
        "print(np.concatenate((y_pred.reshape(len (y_pred,),1), y_test.reshape(len(y_test),1)),1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kHf6J_XedkUw",
        "outputId": "26c65247-4712-4b4b-add1-97ba666b1682"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 0]\n",
            " [1 1]\n",
            " [1 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 0]\n",
            " [1 0]\n",
            " [1 0]\n",
            " [1 1]\n",
            " [1 1]\n",
            " [1 0]\n",
            " [0 1]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [1 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [1 0]\n",
            " [1 1]\n",
            " [0 1]\n",
            " [1 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 1]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [1 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [0 0]\n",
            " [1 1]\n",
            " [0 0]\n",
            " [0 1]\n",
            " [0 0]\n",
            " [0 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h4Hwj34ziWQW"
      },
      "source": [
        "## Making the Confusion Matrix"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix,accuracy_score\n",
        "cm=confusion_matrix(y_test,y_pred)\n",
        "print(cm)\n",
        "accuracy_score(y_test,y_pred)"
      ],
      "metadata": {
        "id": "QflzeGtYepW1",
        "outputId": "4cd3500e-448d-434a-e8fe-fd43381167e6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[46 10]\n",
            " [ 6 18]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6OMC_P0diaoD"
      },
      "source": [
        "## Visualising the Training set results"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib.colors import ListedColormap\n",
        "x_set, y_set = sc.inverse_transform(x_train), y_train\n",
        "x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),\n",
        "                     np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))\n",
        "plt.contourf(x1, x2, cl.predict(sc.transform(np.array([x1.ravel(), x2.ravel()]).T)).reshape(x1.shape),\n",
        "             alpha = 0.75, cmap = ListedColormap(('salmon', 'dodgerblue')))\n",
        "plt.xlim(x1.min(), x1.max())\n",
        "plt.ylim(x2.min(), x2.max())\n",
        "for i, j in enumerate(np.unique(y_set)):\n",
        "    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('salmon', 'dodgerblue'))(i), label = j)\n",
        "plt.title('Logistic Regression (Training set)')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Estimated Salary')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "yJg309u0ffdO",
        "outputId": "167139c8-7ff9-4283-98b9-dc101bf6ff50",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-47e7d6898f6e>:10: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
            "  plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('salmon', 'dodgerblue'))(i), label = j)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SZ-j28aPihZx"
      },
      "source": [
        "## Visualising the Test set results"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib.colors import ListedColormap\n",
        "x_set, y_set = sc.inverse_transform(x_test), y_test\n",
        "x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),\n",
        "                     np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))\n",
        "plt.contourf(x1, x2, cl.predict(sc.transform(np.array([x1.ravel(), x2.ravel()]).T)).reshape(x1.shape),\n",
        "             alpha = 0.75, cmap = ListedColormap(('salmon', 'dodgerblue')))\n",
        "plt.xlim(x1.min(), x1.max())\n",
        "plt.ylim(x2.min(), x2.max())\n",
        "for i, j in enumerate(np.unique(y_set)):\n",
        "    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('salmon', 'dodgerblue'))(i), label = j)\n",
        "plt.title('Logistic Regression (Training set)')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Estimated Salary')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "M5trvcP6gpz8",
        "outputId": "b7cb7dfd-e00d-4d06-cbf2-28e3f297c68e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-267ff4a83bce>:10: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
            "  plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('salmon', 'dodgerblue'))(i), label = j)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
